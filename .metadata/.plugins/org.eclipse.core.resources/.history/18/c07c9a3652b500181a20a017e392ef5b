package denstream.zikaebola;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;

import com.yahoo.labs.samoa.instances.DenseInstance;

import denstream.configure.StatisticIntervalData;
import moa.cluster.Clustering;

public class DSC_Zika_Ebola {
	
    public static boolean createDir(String destDirName) {
        File dir = new File(destDirName);
        if (dir.exists()) {
            return false;
        }
        if (!destDirName.endsWith(File.separator)) {
            destDirName = destDirName + File.separator;
        }
        if (dir.mkdirs()) {
            return true;
        } else {
            return false;
        }
    }

    public static ArrayList<Double> loadDailyTp(String fileName)
    {
    	ArrayList<Double> daily_tp_list = new ArrayList<Double>();
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		try {
			String str = "";
			fis = new FileInputStream(fileName);			
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			
			str = br.readLine();
			while ((str = br.readLine()) != null) {
				double temp_val = Double.parseDouble(str);
				daily_tp_list.add(temp_val);
			}
		} catch (FileNotFoundException e) {
			System.out.println("cannot find file");
		} catch (IOException e) {
			System.out.println("read file failed");
		} finally {
			try {
				br.close();
				isr.close();
				fis.close();				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return daily_tp_list;
    }
    
    public static void PrintHelpInfo()
    {
    	System.out.println("Help Info:");
    	System.out.println("example: java -jar DenStream_Zika_Ebola.jar Test [caseName] [epsilon] [tpType] [tpValue] [skipIndex]");

    	System.out.println("[caseName]： Zika, Ebola");
    	System.out.println("[epsilon]： double value from 0.1 - 20");
    	System.out.println("[tpType]： Count, Minute, Median, Quantile, Minimum, Mean");
    	System.out.println("[tpValue]： if tpType=Count, tpValue=1 - Max_Integer;");
    	System.out.println("          if tpType=Minute, tpValue=1Minute - 24*60Minutes;");
    	System.out.println("          if tpType=Median|Quantile|Minimum|Mean, tpValue=fileName;");
    	System.out.println("[skipIndex]：(optional) integer value, skip before the date index");
    	System.out.println();
    }

    static int caseNum = 2;
	static int tpType = 1;
	static int tp_count_value = 300;
	static double tp_minute_value = 120;
	static String tp_daily_file = "";
	static double epsilonVal = 2.0;
	
	static int date_count = 0;		
	static String start_time_str = "";
	static String inputfileName = "";
	static String outfileName_DailyCluster="";
	static String outfileName_DailyClusterCount = "";
	static String outfileName_DailyFlowMatrix = "";
	static String outfileName_Similarity_1D = "";
	static String outfileName_Similarity_2D = "";
	static String outfileName_Similarity_2D_Ordered = "";

	static ArrayList<Double> daily_tp = null;
	
	static int overall_max_cluster_id = 0;
	
	static int completed_date_index = 0;
	
    public static int ParseSettings(String[] args)
    {
		if (args.length >= 5)
		{
			String caseName = args[1];
			String epsilonStr = args[2];
			String tpTypeStr = args[3];
			String tpValueStr = args[4];
			if (args.length == 6)
			{
				String completed_date_index_str = args[5];
				completed_date_index = Integer.parseInt(completed_date_index_str);
			}
			
			System.out.printf("case name:%s, epsilon:%s, tp type:%s, tp:%s\n",
					caseName,epsilonStr,tpTypeStr,tpValueStr);
			
			epsilonVal = Double.parseDouble(epsilonStr);
			
			if (caseName.equals("Zika")) caseNum = 1;
			else if (caseName.equals("Ebola")) caseNum = 2;
			else {
				System.out.println("Case param error");
				PrintHelpInfo();
				return -1;
			}
			
			///////////////////////////////////////////////////////////////////
			if (tpTypeStr.equals("Count")) {
				tpType = 1;
				tp_count_value = Integer.parseInt(tpValueStr);
			}
			else if (tpTypeStr.equals("Minute")) {
				tpType = 2;
				tp_minute_value = Double.parseDouble(tpValueStr);
			}
			else if (tpTypeStr.equals("Median") || tpTypeStr.equals("Quantile") 
					|| tpTypeStr.equals("Minimum") || tpTypeStr.equals("Mean")) {
				tpType = 3;
				tp_daily_file = tpValueStr;
				daily_tp = loadDailyTp(tp_daily_file);
			}
			else {
				System.out.println("Tp type param error");
				PrintHelpInfo();
				return -1;
			}

			///////////////////////////////////////////////////////////////////
			if (caseNum == 1)
			{
				date_count = 84;
				start_time_str = "2015-12-12 00:00:00";
				inputfileName = "C:/manqi/Zika/zika_export_forDEN.csv";
				if (tpType == 3){
					outfileName_DailyCluster=
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s/clusters_den_stream/",
									epsilonStr, tpTypeStr);

					outfileName_DailyClusterCount =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s/cluster_count.csv", 
							epsilonStr, tpTypeStr);
					
					outfileName_DailyFlowMatrix = 
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s/daily_sim_matrix/",
							epsilonStr, tpTypeStr);

					outfileName_Similarity_1D =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s/similarity_stats_daily_1d.csv", 
							epsilonStr, tpTypeStr);

					outfileName_Similarity_2D =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s/similarity_stats_daily_2d.csv", 
							epsilonStr, tpTypeStr);

					outfileName_Similarity_2D_Ordered =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s/similarity_stats_daily_2d_ordered.csv", 
							epsilonStr, tpTypeStr);
				}
				else{
					outfileName_DailyCluster=
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s_%s/clusters_den_stream/",
									epsilonStr, tpTypeStr, tpValueStr);
					
					outfileName_DailyClusterCount =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s_%s/cluster_count.csv", 
							epsilonStr, tpTypeStr, tpValueStr);
					
					outfileName_DailyFlowMatrix=
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s_%s/daily_sim_matrix/",
									epsilonStr, tpTypeStr, tpValueStr);

					outfileName_Similarity_1D =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s_%s/similarity_stats_daily_1d.csv", 
							epsilonStr, tpTypeStr, tpValueStr);

					outfileName_Similarity_2D =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s_%s/similarity_stats_daily_2d.csv", 
							epsilonStr, tpTypeStr, tpValueStr);

					outfileName_Similarity_2D_Ordered =
							String.format("C:/manqi/Zika/clusterdata_e_%s_tp_%s_%s/similarity_stats_daily_2d_ordered.csv", 
							epsilonStr, tpTypeStr, tpValueStr);
				}
			}
			else if (caseNum == 2)
			{
				date_count = 120;
				start_time_str = "2014-8-21 00:00:00";
				inputfileName = "C:/manqi/Ebola/ebola_export_forDEN.csv";
				if (tpType == 3){
					outfileName_DailyCluster=
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s/clusters_den_stream/",
									epsilonStr, tpTypeStr);

					outfileName_DailyClusterCount =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s/cluster_count.csv", 
							epsilonStr, tpTypeStr);
					
					outfileName_DailyFlowMatrix = 
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s/daily_sim_matrix/",
							epsilonStr, tpTypeStr);

					outfileName_Similarity_1D =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s/similarity_stats_daily_1d.csv", 
							epsilonStr, tpTypeStr);

					outfileName_Similarity_2D =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s/similarity_stats_daily_2d.csv", 
							epsilonStr, tpTypeStr);

					outfileName_Similarity_2D_Ordered =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s/similarity_stats_daily_2d_ordered.csv", 
							epsilonStr, tpTypeStr);
				}
				else{
					outfileName_DailyCluster=
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s_%s/clusters_den_stream/",
									epsilonStr, tpTypeStr, tpValueStr);
					
					outfileName_DailyClusterCount =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s_%s/cluster_count.csv", 
							epsilonStr, tpTypeStr, tpValueStr);
					
					outfileName_DailyFlowMatrix=
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s_%s/daily_sim_matrix/",
									epsilonStr, tpTypeStr, tpValueStr);

					outfileName_Similarity_1D =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s_%s/similarity_stats_daily_1d.csv", 
							epsilonStr, tpTypeStr, tpValueStr);

					outfileName_Similarity_2D =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s_%s/similarity_stats_daily_2d.csv", 
							epsilonStr, tpTypeStr, tpValueStr);

					outfileName_Similarity_2D_Ordered =
							String.format("C:/manqi/Ebola/clusterdata_e_%s_tp_%s_%s/similarity_stats_daily_2d_ordered.csv", 
							epsilonStr, tpTypeStr, tpValueStr);
				}
			}
			else
			{
				PrintHelpInfo();
				return -1;
			}
		}
		else
		{
			System.out.println("Param count error");
			PrintHelpInfo();
			return -1;
		}
        createDir(outfileName_DailyCluster);
        createDir(outfileName_DailyFlowMatrix);
        
        System.out.printf("Daily Cluster Result Out Directory: %s\n", outfileName_DailyCluster);
        System.out.printf("Daily Cluster Count Out File: %s\n", outfileName_DailyClusterCount);
        System.out.printf("Daily Flow Matrix Out Directory: %s\n", outfileName_DailyFlowMatrix); 
        System.out.printf("Similarity 1D Out File: %s\n", outfileName_Similarity_1D);
        System.out.printf("Similarity 2D Out File: %s\n", outfileName_Similarity_2D);
        System.out.printf("Similarity 2D Ordered Out File: %s\n", outfileName_Similarity_2D_Ordered);
        
        System.out.printf("Skip date index: %d", completed_date_index);
        
        return 0;
    }
    
    public static void CalculateCluster()
    {
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
		int[] daily_count_list = new int[date_count];
		Date[] start_date_list = new Date[date_count];
		Date[] end_date_list = new Date[date_count];
		
		StatisticDailyData.getDateRange(start_time_str, date_count, start_date_list, end_date_list);
		String header = StatisticDailyData.loadAndStatistic(inputfileName, date_count, 
				start_date_list, end_date_list, daily_count_list);
		
		for (int iDay=0; iDay<date_count; iDay++)
		{
			System.out.printf("Day %d point count: %d\n", iDay, daily_count_list[iDay]);
		}

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
		moa.clusterers.denstream.WithDBSCAN den = new moa.clusterers.denstream.WithDBSCAN();

		den.epsilonOption.setValue(epsilonVal);
		den.minPointsOption.setValue(1);
		den.initPointsOption.setValue(100);
		den.muOption.setValue(1);
		den.betaOption.setValue(0.2);
		den.lambdaOption.setValue(0.001);
		den.offlineOption.setValue(2);
		den.speedOption.setValue(1);
		den.evaluateMicroClusteringOption.setValue(true);
		
		if (tpType == 1)
		{
			den.tp = tp_count_value;
		}
		else if (tpType == 2)
		{
			den.time_step_milliseconds = (int) (tp_minute_value*60*1000);
		}
		
		den.resetLearningImpl();
		
		String params = den.getParameterString();
		System.out.println(params);

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////		
		int[] cluster_count_list = new int[date_count]; 
		
		ArrayList<String> curDayTweetRecords = new ArrayList<String>();
		ArrayList<double[]> coord_list = new ArrayList<double[]>();
		ArrayList<Date> time_list = new ArrayList<Date>();
		for (int iDay = 0; iDay < date_count; iDay++) 
		{
			int daily_point_count = daily_count_list[iDay];

			double[] point_x_list = new double[daily_point_count];
			double[] point_y_list = new double[daily_point_count];
			int[] point_id_list = new int[daily_point_count];
			
			curDayTweetRecords.clear();
			coord_list.clear();
			time_list.clear();
			LoadDailyPoints.loadPointsWithinADay(inputfileName, date_count, 
					start_date_list, end_date_list, iDay, coord_list, time_list, curDayTweetRecords);
			
			den.start_time_long = time_list.get(0).getTime();
			if (tpType==3){
				if (iDay >= daily_tp.size())
					den.time_step_milliseconds = 
						(int) (Math.round(daily_tp.get(daily_tp.size()-1))*1000*60);
				else
					den.time_step_milliseconds = 
						(int) (Math.round(daily_tp.get(iDay))*1000*60);
			}
			
			for (int iPoint = 0; iPoint < daily_point_count; iPoint++) {
				double[] temp_coord = coord_list.get(iPoint);
				DenseInstance temp_instance = new DenseInstance(1.0D, temp_coord);
				temp_instance.setInstancId(iPoint);
				temp_instance.setTimeFlag(time_list.get(iPoint));

				point_x_list[iPoint] = temp_coord[0];
				point_y_list[iPoint] = temp_coord[1];
				point_id_list[iPoint] = iPoint;
				
				if (tpType == 1){
					den.trainOnInstanceImpl_TpStaticIndex(temp_instance);
				}
				else{
					den.trainOnInstanceImpl(temp_instance);
				}
			}
			
			if (iDay >= completed_date_index)
			{
				ProcessPotentialCluster.fillPotentialCluster(den, daily_point_count, 
						point_x_list, point_y_list, point_id_list);

				//////////////////////////////////////////////////////////////////////
				Clustering daily_cluster = den.getClusteringResult();
				System.out.printf("Day %d", iDay);
				System.out.printf(", Cluster count: %d\n", daily_cluster.size());
				cluster_count_list[iDay] = daily_cluster.size();

				//////////////////////////////////////////////////////////////////////
				{
					//////////////////////////////////////////////////////////////////////
					HashMap<Integer, Integer> cluster_id_hashMap = new HashMap<>();
					int cluster_count = daily_cluster.size();
					int max_cluster_id = 0;
					for (int iCluster = 0; iCluster<cluster_count; iCluster++)
					{
						moa.clusterers.macro.NonConvexCluster temp_cluster = 
							(moa.clusterers.macro.NonConvexCluster)daily_cluster.getClustering().get(iCluster);
						int cluster_id = (int) temp_cluster.getId();
						int micro_cluster_count = temp_cluster.getMicroClusters().size();
						for (int iMicro = 0; iMicro < micro_cluster_count; iMicro++) 
						{
							moa.clusterers.denstream.MicroCluster temp_micro_cluster = 
								(moa.clusterers.denstream.MicroCluster)temp_cluster.getMicroClusters().get(iMicro);
							
							int point_count = temp_micro_cluster.related_point_idxs.size();
							for (int iPoint=0; iPoint<point_count; iPoint++)
							{
								int point_id = temp_micro_cluster.related_point_idxs.get(iPoint);
								cluster_id_hashMap.put(point_id, cluster_id+1);
							}
						}
						if (cluster_id > max_cluster_id)
						{
							max_cluster_id = cluster_id;
						}
					}
					max_cluster_id=max_cluster_id+1;
					if (max_cluster_id > overall_max_cluster_id)
					{
						overall_max_cluster_id = max_cluster_id;
					}
					
					//////////////////////////////////////////////////////////////////////
					HashMap<Integer, Integer> recluster_id_hashMap = new HashMap<>();
					String retw_x_str;
					String retw_y_str;
					double temp_x_val;
					double temp_y_val;
					for (int iRecord=0; iRecord<curDayTweetRecords.size(); iRecord++)			
					{
						String str = curDayTweetRecords.get(iRecord);
						String[] temp_line_array = str.split(",");
	
						retw_x_str = temp_line_array[11];
						retw_y_str = temp_line_array[12];
						temp_x_val = Double.parseDouble(retw_x_str);
						temp_y_val = Double.parseDouble(retw_y_str);
						
						Integer cluster_id_value = ProcessPotentialCluster.getClusterIdWithCoord(temp_x_val, 
								temp_y_val, den, daily_cluster, point_x_list, point_y_list);
						
						if (cluster_id_value != null)
						{
							recluster_id_hashMap.put(iRecord, cluster_id_value);
						}
					}
	
					//////////////////////////////////////////////////////////////////////
					SaveDailyData.writeDailyDataWithClusterInfo(outfileName_DailyCluster, iDay, header,
							curDayTweetRecords, cluster_id_hashMap, recluster_id_hashMap, den);
					
					GenerateFlowMatrix.genDailyFlowMatrix(outfileName_DailyFlowMatrix, iDay, 
							max_cluster_id, curDayTweetRecords, 
							cluster_id_hashMap, recluster_id_hashMap);
				}
				SaveDailyCluster.writeDailyClusterInfo(outfileName_DailyCluster, iDay, daily_cluster);
			}
			else
			{
				Clustering daily_cluster = den.getClusteringResult();
				System.out.printf("Day %d", iDay);
				System.out.printf(", Cluster count: %d\n", daily_cluster.size());
				cluster_count_list[iDay] = daily_cluster.size();

				int cluster_count = daily_cluster.size();
				int max_cluster_id = 0;
				for (int iCluster = 0; iCluster<cluster_count; iCluster++)
				{
					moa.clusterers.macro.NonConvexCluster temp_cluster = 
						(moa.clusterers.macro.NonConvexCluster)daily_cluster.getClustering().get(iCluster);
					int cluster_id = (int) temp_cluster.getId();					
					if (cluster_id > max_cluster_id)
					{
						max_cluster_id = cluster_id;
					}
				}
				max_cluster_id=max_cluster_id+1;
				if (max_cluster_id > overall_max_cluster_id)
				{
					overall_max_cluster_id = max_cluster_id;
				}
			}
			
			//////////////////////////////////////////////////////////////////////
			int potential_count = den.getMicroClusteringResult().size();
			for (int iPC = 0; iPC < potential_count; iPC++) 
			{
				moa.clusterers.denstream.MicroCluster temp_cluster = 
						(moa.clusterers.denstream.MicroCluster)(den.getMicroClusteringResult().get(iPC));
				temp_cluster.related_point_idxs.clear();
				temp_cluster.related_points_dist.clear();
			}
			int outlier_count = den.o_micro_cluster.size();
			for (int iOC = 0; iOC < outlier_count; iOC++) 
			{
				moa.clusterers.denstream.MicroCluster temp_cluster = 
						(moa.clusterers.denstream.MicroCluster)(den.o_micro_cluster.get(iOC));
				temp_cluster.related_point_idxs.clear();
				temp_cluster.related_points_dist.clear();
			}
			
		} //! End daily loop

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output daily cluster count file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_DailyClusterCount));
			outBufWriter.write("Daily Cluster Count\n");
			
			for (int iDay=0; iDay<date_count; iDay++)
			{
				outBufWriter.write(String.format("%d", cluster_count_list[iDay]));
				outBufWriter.write("\n");
			}
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}        
    }
    
	////////////////////////////////////////////////////////////////////////////
	//
	//
	////////////////////////////////////////////////////////////////////////////
	public static void main(String[] args) 
	{
		System.out.println("Starting...");
		
		if (ParseSettings(args) != 0)
		{
			return;
		}
		
		if (completed_date_index < date_count)
		{
			CalculateCluster();
		}

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output daily similarity 1d file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        ArrayList<Double> sim_1d_list = new ArrayList<Double>();
        if (overall_max_cluster_id == 0)
        	overall_max_cluster_id = 600;
        for (int iDay=0; iDay<date_count-1; iDay++)
        {
        	Integer day_idx = iDay+1;
        	String inputfileName_Matrix1 = outfileName_DailyFlowMatrix + "flowprob_matrix"+ day_idx.toString()+".csv";
        	
        	Integer next_day_idx = iDay+2;
        	String inputfileName_Matrix2 = outfileName_DailyFlowMatrix + "flowprob_matrix"+ next_day_idx.toString()+".csv";
            
        	double temp_sim = CalculateSimilarity.calculateSimilarity(inputfileName_Matrix1, 
        			inputfileName_Matrix2, overall_max_cluster_id);
        	sim_1d_list.add(temp_sim);
        }
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_Similarity_1D));
			outBufWriter.write("Similarity_1D\n");
			
			for (int iDay=0; iDay<sim_1d_list.size(); iDay++)
			{
				outBufWriter.write(String.format("%f", sim_1d_list.get(iDay)));
				outBufWriter.write("\n");
			}
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output daily similarity 2d file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        double[][] daily_matrix = new double[date_count][date_count];
        for (int iRow = 0; iRow < date_count; iRow++)
        {
            for (int iCol = 0; iCol < date_count; iCol++)
            {
            	daily_matrix[iRow][iCol] = 1.0;
            }
        }

        for (int iDay=0; iDay<date_count; iDay++)
        {
        	Integer day_idx = iDay+1;
        	String inputfileName_Matrix1 = outfileName_DailyFlowMatrix + "flowprob_matrix"+ day_idx.toString()+".csv";
        	
        	for (int iNextDay=0; iNextDay<date_count; iNextDay++)
            {
        		if (iDay == iNextDay) continue;
	        	Integer next_day_idx = iNextDay+1;
	        	String inputfileName_Matrix2 = outfileName_DailyFlowMatrix + "flowprob_matrix"+ next_day_idx.toString()+".csv";
	            
	        	double temp_sim = CalculateSimilarity.calculateSimilarity(inputfileName_Matrix1, 
	        			inputfileName_Matrix2, overall_max_cluster_id);
	        	
	        	daily_matrix[iDay][iNextDay] = temp_sim;
            }
        }
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_Similarity_2D));
			outBufWriter.write("Similarity_2D\n");
			
			for (int iRow = 0; iRow < date_count; iRow++)
	        {
				outBufWriter.write(String.format("%f", daily_matrix[iRow][0]));
	            for (int iCol = 1; iCol < date_count; iCol++)
	            {
	            	outBufWriter.write(",");
	            	outBufWriter.write(String.format("%f", daily_matrix[iRow][iCol]));	            	
	            }
	            outBufWriter.write("\n");
	        }
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output daily similarity 2d ordered file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        HashMap<Integer, Double> row_sum = new HashMap<Integer, Double>();
        for (int iRow = 0; iRow < date_count; iRow++)
        {
        	double sum = 0.0;
        	for (int iCol = 0; iCol < date_count; iCol++)
            {
        		sum += daily_matrix[iRow][iCol];
            }
            row_sum.put(iRow, sum);
        }
        ArrayList<HashMap.Entry<Integer, Double>> list = new ArrayList<>();
        for(HashMap.Entry<Integer, Double> entry : row_sum.entrySet())
        {
            list.add(entry);
        }    
        list.sort(new Comparator<HashMap.Entry<Integer, Double>>(){
            @Override
            public int compare(HashMap.Entry<Integer, Double> o1, HashMap.Entry<Integer, Double> o2) 
            {
            	double val = o2.getValue()-o1.getValue();
            	if (val<0) return -1;
            	else if (val>0) return 1;
            	else return 0;
            } 
        });

        String first_line = "0,";
        for(HashMap.Entry<Integer, Double> entry: list)
        {
        	Integer temp_id = entry.getKey() + 1;
        	first_line += temp_id.toString() + ",";
        }
        first_line.substring(0, first_line.length() - 1);
        
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_Similarity_2D_Ordered));
			outBufWriter.write(first_line);
			outBufWriter.write("\n");
			
			for(HashMap.Entry<Integer, Double> entry: list)
	        {
				Integer temp_key = entry.getKey() + 1;
				outBufWriter.write(temp_key.toString());
				for (int i=0; i<date_count; i++)
				{
					double temp_val = daily_matrix[temp_key-1][i];
					outBufWriter.write(",");
					outBufWriter.write(String.format("%f", temp_val));
				}
				outBufWriter.write("\n");
	        }
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
