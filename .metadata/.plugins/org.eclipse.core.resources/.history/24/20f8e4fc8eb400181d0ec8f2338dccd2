package denstream.configure;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

public class LoadIntervalPoints 
{
	/////////////////////////////////////////////////////////////////////////////////
	//
	//
	//
	/////////////////////////////////////////////////////////////////////////////////
	public static void loadPointsWithinAnInterval(String fileName,
			int interval_count,
			Date[] start_date_list,
			Date[] end_date_list,
			int current_interval_idx,
			int time_index,
			int x_index,
			int y_index,
			ArrayList<double[]> coord_list,
			ArrayList<Date> time_list,
			ArrayList<String> outBuffer)
	{
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		try {
			String str = "";
			fis = new FileInputStream(fileName);
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			
			str = br.readLine();
			Date temp_date = null;
			String tw_x_str;
			String tw_y_str;
			double temp_x_val;
			double temp_y_val;
			while ((str = br.readLine()) != null) 
			{
				String[] temp_line_array = str.split(",");
				String time_str = temp_line_array[time_index];
				try {
					temp_date = sdf.parse(time_str);
				} catch (ParseException e) {
					e.printStackTrace();
				}		
				int interval_idx = StatisticIntervalData.getTimeIntervalIndex(temp_date, 
						start_date_list, end_date_list);
				
				////////////////////////////////////////////////////////////////
				if (interval_idx == -1)
				{
					continue;
				}
				if (interval_idx == -2)
				{
					break;
				}
				
				////////////////////////////////////////////////////////////////
				if (interval_idx < current_interval_idx)
				{
					continue;				
				}
				if (interval_idx > current_interval_idx)
				{
					break;
				}

				////////////////////////////////////////////////////////////////
				if (interval_idx == current_interval_idx)
				{
					outBuffer.add(str);
					tw_x_str = temp_line_array[x_index];
					tw_y_str = temp_line_array[y_index];
					temp_x_val = Double.parseDouble(tw_x_str);
					temp_y_val = Double.parseDouble(tw_y_str);

					double[] coord = new double[2];
					coord[0] = temp_x_val;
					coord[1] = temp_y_val;
					coord_list.add(coord);
					time_list.add(temp_date);
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("cannot find file");
		} catch (IOException e) {
			System.out.println("read file failed");
		} finally {
			try {
				br.close();
				isr.close();
				fis.close();				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public static void loadPointsWithinAnInterval_Count(String fileName,
			int accumulated_count,
			int interval_count,
			int x_index,
			int y_index,
			ArrayList<double[]> coord_list,
			ArrayList<String> outBuffer)
	{
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		try {
			String str = "";
			fis = new FileInputStream(fileName);
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			
			str = br.readLine();
			String tw_x_str;
			String tw_y_str;
			double temp_x_val;
			double temp_y_val;
			int read_line_flag = 0;
			while ((str = br.readLine()) != null) 
			{
				read_line_flag++;
				if (read_line_flag <= accumulated_count)
					continue;

				////////////////////////////////////////////////////////////////
				String[] temp_line_array = str.split(",");				
				{
					outBuffer.add(str);
					tw_x_str = temp_line_array[x_index];
					tw_y_str = temp_line_array[y_index];
					temp_x_val = Double.parseDouble(tw_x_str);
					temp_y_val = Double.parseDouble(tw_y_str);

					double[] coord = new double[2];
					coord[0] = temp_x_val;
					coord[1] = temp_y_val;
					coord_list.add(coord);
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("cannot find file");
		} catch (IOException e) {
			System.out.println("read file failed");
		} finally {
			try {
				br.close();
				isr.close();
				fis.close();				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public static int loadAllPoints(String fileName,
			int interval_count,
			Date[] start_date_list,
			Date[] end_date_list,
			int time_index,
			int x_index,
			int y_index,
			int connected_x_index,
			int connected_y_index,
			ArrayList<double[]> coord_list,
			ArrayList<double[]> connected_coord_list,
			ArrayList<Date> time_list)
	{
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		int real_start_index = -1;
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		try {
			String str = "";
			fis = new FileInputStream(fileName);
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			
			str = br.readLine();
			Date temp_date = null;
			String tw_x_str;
			String tw_y_str;
			double temp_x_val;
			double temp_y_val;
			
			int flag = 0;
			int print_flag = 100000;
			while ((str = br.readLine()) != null) 
			{
				flag++;
				if (flag % print_flag == 0){
					System.out.println(flag);
				}
				
				String[] temp_line_array = str.split(",");
				String time_str = temp_line_array[time_index];
				try {
					temp_date = sdf.parse(time_str);
				} catch (ParseException e) {
					e.printStackTrace();
				}
				if (temp_date.before(start_date_list[0]))
				{
					continue;
				}
				
				if (temp_date.after(end_date_list[interval_count-1]))
				{
					break;
				}
				
				if (real_start_index==-1)
					real_start_index=flag-1;
				
				////////////////////////////////////////////////////////////////				
				{
					tw_x_str = temp_line_array[x_index];
					tw_y_str = temp_line_array[y_index];
					temp_x_val = Double.parseDouble(tw_x_str);
					temp_y_val = Double.parseDouble(tw_y_str);
					double[] coord = new double[2];
					coord[0] = temp_x_val;
					coord[1] = temp_y_val;
					coord_list.add(coord);
					
					if (connected_x_index>=0 && connected_y_index>=0)
					{
						tw_x_str = temp_line_array[connected_x_index];
						tw_y_str = temp_line_array[connected_y_index];
						temp_x_val = Double.parseDouble(tw_x_str);
						temp_y_val = Double.parseDouble(tw_y_str);
						double[] coord1 = new double[2];
						coord1[0] = temp_x_val;
						coord1[1] = temp_y_val;
						connected_coord_list.add(coord1);
					}
					
					time_list.add(temp_date);
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("cannot find file");
		} catch (IOException e) {
			System.out.println("read file failed");
		} finally {
			try {
				br.close();
				isr.close();
				fis.close();				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return real_start_index;
	}
	
	public static int loadAllPoints_Count(String fileName,
			int interval_count,
			int x_index,
			int y_index,
			int connected_x_index,
			int connected_y_index,
			ArrayList<double[]> coord_list,
			ArrayList<double[]> connected_coord_list)
	{
		int real_start_index = -1;
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		try {
			String str = "";
			fis = new FileInputStream(fileName);
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			
			str = br.readLine();
			String tw_x_str;
			String tw_y_str;
			double temp_x_val;
			double temp_y_val;
			
			int flag = 0;
			int print_flag = 100000;
			while ((str = br.readLine()) != null) 
			{
				flag++;
				if (flag % print_flag == 0){
					System.out.println(flag);
				}
				
				////////////////////////////////////////////////////////////////	
				String[] temp_line_array = str.split(",");
				{
					tw_x_str = temp_line_array[x_index];
					tw_y_str = temp_line_array[y_index];
					temp_x_val = Double.parseDouble(tw_x_str);
					temp_y_val = Double.parseDouble(tw_y_str);
					double[] coord = new double[2];
					coord[0] = temp_x_val;
					coord[1] = temp_y_val;
					coord_list.add(coord);

					if (connected_x_index>=0 && connected_y_index>=0)
					{
						tw_x_str = temp_line_array[connected_x_index];
						tw_y_str = temp_line_array[connected_y_index];
						temp_x_val = Double.parseDouble(tw_x_str);
						temp_y_val = Double.parseDouble(tw_y_str);
						double[] coord1 = new double[2];
						coord1[0] = temp_x_val;
						coord1[1] = temp_y_val;
						connected_coord_list.add(coord1);
					}					
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("cannot find file");
		} catch (IOException e) {
			System.out.println("read file failed");
		} finally {
			try {
				br.close();
				isr.close();
				fis.close();				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return real_start_index;
	}
}
