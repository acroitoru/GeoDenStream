package denstream.configure;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import moa.cluster.Clustering;

import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

import com.yahoo.labs.samoa.instances.DenseInstance;


public class DSC_Dynamic {

    public static boolean createDir(String destDirName) {
        File dir = new File(destDirName);
        if (dir.exists()) {
            return false;
        }
        if (!destDirName.endsWith(File.separator)) {
            destDirName = destDirName + File.separator;
        }
        if (dir.mkdirs()) {
            return true;
        } else {
            return false;
        }
    }

    public static ArrayList<Double> loadIntervalTp(String fileName)
    {
    	ArrayList<Double> interval_tp_list = new ArrayList<Double>();
		FileInputStream fis = null;
		InputStreamReader isr = null;
		BufferedReader br = null;
		try {
			String str = "";
			fis = new FileInputStream(fileName);			
			isr = new InputStreamReader(fis);
			br = new BufferedReader(isr);
			
			str = br.readLine();
			while ((str = br.readLine()) != null) {
				double temp_val = Double.parseDouble(str);
				interval_tp_list.add(temp_val);
			}
		} catch (FileNotFoundException e) {
			System.out.println("cannot find file");
		} catch (IOException e) {
			System.out.println("read file failed");
		} finally {
			try {
				br.close();
				isr.close();
				fis.close();				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return interval_tp_list;
    }

    public static void PrintHelpInfo()
    {
    	System.out.println("Help Info:");
    	System.out.println("example: java -jar DenStream.jar DenStream_Progressive "
    			+ "[configureFileName]");

    	System.out.println("[configureFileName] text file full path --");
    	System.out.println("<DenStreamCase>");
    	System.out.println("  <Stream>");
    	System.out.println("    <FileName/> string: input csv file ");
    	System.out.println("    <XColumnIndex/> integer: column index of X informaton");
    	System.out.println("    <YColumnIndex/> integer: column index of Y informaton");
    	System.out.println("    <TimeColumnIndex/> integer: column index of X informaton");
    	System.out.println("    <ConnectedXColumnIndex/> integer: column index of X1 informaton");
    	System.out.println("    <ConnectedYColumnIndex/> integer: column index of Y1 informaton");
    	System.out.println("  </Stream>");
    	System.out.println("  <Time>");
    	System.out.println("    <StartTime> string: Year-month-day hour:minute:second");
    	System.out.println("    <IntervalType> string: Year|Month|Week|Day|Hour|Minute|Second");
    	System.out.println("    <IntervalValue> integer: indicates interval");
    	System.out.println("    <IntervalCount> integer: indicates interval count");
    	System.out.println("  </Time>");
    	System.out.println("  <Cluster>");
    	System.out.println("    <Epsilon> float: epsilon neighbourhood");
    	System.out.println("    <MinPoints> integer: minimal number of points cluster contain");
    	System.out.println("    <InitPoints> integer: number of points to use for initialization");
    	System.out.println("    <Mu> float: mu parameter for pruning");
    	System.out.println("    <Lambda> float: lambda parameter for pruning");
    	System.out.println("    <Beta> float: beta parameter for pruning");
    	System.out.println("    <Offline> float: epsilon*offline for offline DBSCAN");
    	System.out.println("    <PruningType> string: Count|Time|Dynamic");
    	System.out.println("    <PruningValue> Count: number; Time: number; Dynamic: file");
    	System.out.println("  </Cluster>");
    	System.out.println("  <Output>");
    	System.out.println("    <Directory> string: output directory");
    	System.out.println("    <StartIntervalIndex> integer: start index of interval");
    	System.out.println("  </Output>");
    	System.out.println("</DenStreamCase>");
    	System.out.println();
    }

	static String inputfileName = "";
	static int x_index = 0;
	static int y_index = 0;
	static int time_index = 0;
	static int connected_x_index = -1;
	static int connected_y_index = -1;
	
	static String start_time_str = "";
	static String interval_type_str = "";
	static int interval_value = 1;
	static int interval_count = 0;

	static double epsilon_val = 2.0;
	static int minpoints_val = 1;
	static int initpoints_val = 100;
	static double mu_val = 1.0;
	static double lambda_val = 0.001;
	static double beta_val = 0.2;
	static double offline_val = 2.0;
	static String pruning_type_str = "Count";
	static String pruning_value_str = "";

	static String output_dir = "";
	
	static int tpType = 1;
	static int tp_count_value = 300;
	static double tp_time_value = 120;
	static String tp_file_str = "";
	
	static String outfileName_IntervalCluster="";
	static String outfileName_IntervalClusterCount = "";

	
	static ArrayList<Double> interval_dynamic_tp = null;
	
	static int overall_max_cluster_id = 0;
	
	static int completed_interval_index = 0;
	
    public static int ParseSettings(String[] args)
    {
		if (args.length >= 2)
		{
			String configureFileName = args[1];

			System.out.println("Den Stream Clustering: Dynamic Memory");
			System.out.printf("configure file name:%s\n",configureFileName);
			SAXReader reader = new SAXReader();
			Document doc = null;
			try {
				doc = reader.read(new File(configureFileName));
			} catch (DocumentException e) {
				e.printStackTrace();
				return -1;
			}
			
			Element root = doc.getRootElement();
			try
			{
				////////////////////////////////////////////////////////////////////////////
				if (root.element("Stream")!=null){
					Element FileName_element=root.element("Stream").element("FileName");
					if (FileName_element != null) 
						inputfileName = FileName_element.getText(); 
					
					Element XColumnIndex_element=root.element("Stream").element("XColumnIndex");			
					if (XColumnIndex_element !=null) 
						x_index = Integer.parseInt(XColumnIndex_element.getText());
		
					Element YColumnIndex_element=root.element("Stream").element("YColumnIndex");			
					if (YColumnIndex_element !=null)
						y_index = Integer.parseInt(YColumnIndex_element.getText());				
		
					Element TimeColumnIndex_element=root.element("Stream").element("TimeColumnIndex");			
					if (TimeColumnIndex_element !=null)
						time_index = Integer.parseInt(TimeColumnIndex_element.getText());
					
					Element ConnectedXColumnIndex_element=root.element("Stream").element("ConnectedXColumnIndex");			
					if (ConnectedXColumnIndex_element !=null) 
						connected_x_index = Integer.parseInt(ConnectedXColumnIndex_element.getText());
		
					Element ConnectedYColumnIndex_element=root.element("Stream").element("ConnectedYColumnIndex");			
					if (ConnectedYColumnIndex_element !=null)
						connected_y_index = Integer.parseInt(ConnectedYColumnIndex_element.getText());	
				}
				
				////////////////////////////////////////////////////////////////////////////
				if (root.element("Time")!=null){
					Element StartTime_element=root.element("Time").element("StartTime");			
					if (StartTime_element !=null) 
						start_time_str = StartTime_element.getText(); 
					
					Element IntervalType_element=root.element("Time").element("IntervalType");			
					if (IntervalType_element !=null) 
						interval_type_str = IntervalType_element.getText(); 
		
					Element IntervalValue_element=root.element("Time").element("IntervalValue");			
					if (IntervalValue_element !=null) 
						interval_value = Integer.parseInt(IntervalValue_element.getText());			
		
					Element IntervalCount_element=root.element("Time").element("IntervalCount");
					if (IntervalCount_element !=null) 
						interval_count = Integer.parseInt(IntervalCount_element.getText());			
				}
				
				////////////////////////////////////////////////////////////////////////////
				if (root.element("Cluster")!=null){
					Element Epsilon_element=root.element("Cluster").element("Epsilon");
					if (Epsilon_element!=null) 
						epsilon_val = Double.parseDouble(Epsilon_element.getText());
					
					Element MinPoints_element=root.element("Cluster").element("MinPoints");
					if (MinPoints_element!=null) 
						minpoints_val = Integer.parseInt(MinPoints_element.getText());
					
					Element InitPoints_element=root.element("Cluster").element("InitPoints");
					if (InitPoints_element!=null) 
						initpoints_val = Integer.parseInt(InitPoints_element.getText());
					
					Element Mu_element=root.element("Cluster").element("Mu");
					if (Mu_element!=null) 
						mu_val = Double.parseDouble(Mu_element.getText());
					
					Element Lambda_element=root.element("Cluster").element("Lambda");
					if (Lambda_element!=null) 
						lambda_val = Double.parseDouble(Lambda_element.getText());
					
					Element Beta_element=root.element("Cluster").element("Beta");
					if (Beta_element!=null) 
						beta_val = Double.parseDouble(Beta_element.getText());
					
					Element Offline_element=root.element("Cluster").element("Offline");
					if (Offline_element!=null) 
						offline_val = Double.parseDouble(Offline_element.getText());
					
					Element PruningType_element=root.element("Cluster").element("PruningType");
					if (PruningType_element!=null) 
						pruning_type_str = PruningType_element.getText();
					
					Element PruningValue_element=root.element("Cluster").element("PruningValue");
					if (PruningValue_element!=null) 
						pruning_value_str = PruningValue_element.getText();
				}
				
				////////////////////////////////////////////////////////////////////////////
				if (root.element("Output")!=null){
					Element Directory_element=root.element("Output").element("Directory");
					if (Directory_element!=null) 
						output_dir = Directory_element.getText();
					
					Element StartIntervalIndex_element=root.element("Output").element("StartIntervalIndex");
					if (StartIntervalIndex_element!=null) 
						completed_interval_index = Integer.parseInt(StartIntervalIndex_element.getText());
				}
			}
			catch(Exception e){
				e.printStackTrace();
				return -1;
			}
			
			////////////////////////////////////////////////////////////////////////////
			if (pruning_type_str.equals("Count")) {
				tpType = 1;
				tp_count_value = Integer.parseInt(pruning_value_str);
			}
			else if (pruning_type_str.equals("Time")) {
				tpType = 2;
				tp_time_value = Double.parseDouble(pruning_value_str);
			}
			else if (pruning_type_str.equals("Dynamic")) {
				tpType = 3;
				tp_file_str = pruning_value_str;
				interval_dynamic_tp = loadIntervalTp(tp_file_str);
			}
			else {
				System.out.println("Tp type param error");
				PrintHelpInfo();
				return -1;
			}

			outfileName_IntervalCluster=String.format("%s/clusters_den_stream/", output_dir);
			outfileName_IntervalClusterCount=String.format("%s/cluster_count.csv", output_dir);
			
			System.out.println(inputfileName);
			System.out.println(x_index);
			System.out.println(y_index);
			System.out.println(time_index);
		}
		else
		{
			System.out.println("Param count error");
			PrintHelpInfo();
			return -1;
		}
        createDir(outfileName_IntervalCluster);        
        return 0;
    }

    public static void PreCalculateCluster()
    {
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
		int[] interval_count_list = new int[interval_count];
		Date[] start_date_list = new Date[interval_count];
		Date[] end_date_list = new Date[interval_count];
		
		StatisticIntervalData.getTimeIntervalRange(start_time_str,interval_type_str, 
				interval_value, interval_count, start_date_list, end_date_list);
		
		String header = StatisticIntervalData.loadAndStatisticInterval(inputfileName, 
				interval_count,start_date_list, end_date_list, interval_count_list);
		
		for (int iInterval=0; iInterval<interval_count; iInterval++)
		{
			System.out.printf("Interval %d [%s-%s], point count: %d\n", 
					iInterval, start_date_list[iInterval],end_date_list[iInterval],
					interval_count_list[iInterval]);
		}
		
		
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
		moa.clusterers.denstream.WithDBSCAN den = new moa.clusterers.denstream.WithDBSCAN();
		
		den.epsilonOption.setValue(epsilon_val);
		den.minPointsOption.setValue(minpoints_val);
		den.initPointsOption.setValue(initpoints_val);
		den.muOption.setValue(mu_val);
		den.betaOption.setValue(beta_val);
		den.lambdaOption.setValue(lambda_val);
		den.offlineOption.setValue(offline_val);
		den.speedOption.setValue(1);
		den.evaluateMicroClusteringOption.setValue(true);
		
		if (tpType == 1)
		{
			den.tp = tp_count_value;
		}
		else if (tpType == 2)
		{
			den.time_step_milliseconds = (int) (tp_time_value*1000);
		}
		
		den.resetLearningImpl();
		
		String params = den.getParameterString();
		System.out.println(params);    	
    }
    
    public static void CalculateCluster()
    {		
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
    	if (time_index<0)
    		return;
    		
		int[] interval_count_list = new int[interval_count];
		Date[] start_date_list = new Date[interval_count];
		Date[] end_date_list = new Date[interval_count];
		
		StatisticIntervalData.getTimeIntervalRange(start_time_str,interval_type_str, 
				interval_value, interval_count, start_date_list, end_date_list);
		
		String header = StatisticIntervalData.loadAndStatisticInterval(inputfileName, 
				interval_count,start_date_list, end_date_list, interval_count_list);
		
		for (int iInterval=0; iInterval<interval_count; iInterval++)
		{
			System.out.printf("Interval %d [%s-%s], point count: %d\n", 
					iInterval, start_date_list[iInterval],end_date_list[iInterval],
					interval_count_list[iInterval]);
		}
		
		
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
		moa.clusterers.denstream.WithDBSCAN den = new moa.clusterers.denstream.WithDBSCAN();
		
		den.epsilonOption.setValue(epsilon_val);
		den.minPointsOption.setValue(minpoints_val);
		den.initPointsOption.setValue(initpoints_val);
		den.muOption.setValue(mu_val);
		den.betaOption.setValue(beta_val);
		den.lambdaOption.setValue(lambda_val);
		den.offlineOption.setValue(offline_val);
		den.speedOption.setValue(1);
		den.evaluateMicroClusteringOption.setValue(true);
		
		if (tpType == 1)
		{
			den.tp = tp_count_value;
		}
		else if (tpType == 2)
		{
			den.time_step_milliseconds = (int) (tp_time_value*1000);
		}
		
		den.resetLearningImpl();
		
		String params = den.getParameterString();
		System.out.println(params);
		
		
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////		
		int[] cluster_count_list = new int[interval_count]; 
		String outfileName_IntervalFlowMatrix = String.format("%s/flow_matrix/", output_dir);
		if (connected_x_index>0 && connected_y_index>0)
		{
			createDir(outfileName_IntervalFlowMatrix);
		}
		
		ArrayList<double[]> coord_list = new ArrayList<double[]>();
		ArrayList<double[]> connected_coord_list = new ArrayList<double[]>();
		ArrayList<Date> time_list = new ArrayList<Date>();
		for (int iInterval = 0; iInterval < interval_count; iInterval++) 
		{
			int acc_count = 0;
			for (int idx = 0; idx < iInterval; idx++) {
				acc_count += interval_count_list[idx];
			}
			int real_start_index = 0;
			
			int interval_point_count = interval_count_list[iInterval];
			if (interval_point_count<=0)
			{
				System.out.printf("Interval %d", iInterval);
				System.out.printf(", Cluster count: %d\n", 0);
				cluster_count_list[iInterval] = 0;
				continue;
			}
		
			double[] point_x_list = new double[interval_point_count];
			double[] point_y_list = new double[interval_point_count];
			int[] point_id_list = new int[interval_point_count];
			
			coord_list.clear();
			time_list.clear();
			LoadIntervalPoints.loadPointsWithinAnInterval(inputfileName, interval_count, 
					start_date_list, end_date_list, iInterval, 
					time_index, x_index, y_index,connected_x_index, connected_y_index,
					coord_list, connected_coord_list, time_list);
			
			den.start_time_long = time_list.get(0).getTime();
			if (tpType==3){
				if (iInterval >= interval_dynamic_tp.size())
					den.time_step_milliseconds = 
						(int) (Math.round(interval_dynamic_tp.get(interval_dynamic_tp.size()-1))*1000*60);
				else
					den.time_step_milliseconds = 
						(int) (Math.round(interval_dynamic_tp.get(iInterval))*1000*60);
			}
			
			for (int iPoint = 0; iPoint < interval_point_count; iPoint++) {
				double[] temp_coord = coord_list.get(iPoint);
				DenseInstance temp_instance = new DenseInstance(1.0D, temp_coord);
				temp_instance.setInstancId(iPoint);
				temp_instance.setTimeFlag(time_list.get(iPoint));
		
				point_x_list[iPoint] = temp_coord[0];
				point_y_list[iPoint] = temp_coord[1];
				point_id_list[iPoint] = iPoint;
				
				if (tpType == 1 || time_index<0){
					den.trainOnInstanceImpl_TpStaticIndex(temp_instance);
				}
				else{
					den.trainOnInstanceImpl(temp_instance);
				}
			}
			
			if (iInterval >= completed_interval_index)
			{
				ArrayList<Integer> remained_points_idx_list = 
						ProcessPotentialCluster.fillPotentialCluster(den, interval_point_count, 
								point_x_list, point_y_list, point_id_list);
		
				//////////////////////////////////////////////////////////////////////
				Clustering interval_cluster = den.getClusteringResult();
				System.out.printf("Interval %d", iInterval);
				System.out.printf(", Cluster count: %d\n", interval_cluster.size());
				cluster_count_list[iInterval] = interval_cluster.size();

				//////////////////////////////////////////////////////////////////////
				ProcessOfflineCluster.fillOfflineCluster(den, interval_cluster, 
								point_x_list, point_y_list, remained_points_idx_list);
				
				//////////////////////////////////////////////////////////////////////
				HashMap<Integer, Integer> cluster_id_hashMap = new HashMap<>();
				int cluster_count = interval_cluster.size();
				int max_cluster_id = 0;
				for (int iCluster = 0; iCluster<cluster_count; iCluster++)
				{
					moa.clusterers.macro.NonConvexCluster temp_cluster = 
						(moa.clusterers.macro.NonConvexCluster)interval_cluster.getClustering().get(iCluster);
					int cluster_id = (int) temp_cluster.getId();
					int micro_cluster_count = temp_cluster.getMicroClusters().size();
					for (int iMicro = 0; iMicro < micro_cluster_count; iMicro++) 
					{
						moa.clusterers.denstream.MicroCluster temp_micro_cluster = 
							(moa.clusterers.denstream.MicroCluster)temp_cluster.getMicroClusters().get(iMicro);
						
						int point_count = temp_micro_cluster.related_point_idxs.size();
						for (int iPoint=0; iPoint<point_count; iPoint++)
						{
							int point_id = temp_micro_cluster.related_point_idxs.get(iPoint);
							cluster_id_hashMap.put(point_id, cluster_id+1);
						}
					}
					if (cluster_id > max_cluster_id)
					{
						max_cluster_id = cluster_id;
					}
				}
				max_cluster_id=max_cluster_id+1;
				if (max_cluster_id > overall_max_cluster_id)
				{
					overall_max_cluster_id = max_cluster_id;
				}
				
				//////////////////////////////////////////////////////////////////////
				HashMap<Integer, Integer> connected_cluster_id_hashMap = new HashMap<>();
				if (connected_x_index>0 && connected_y_index>0)
				{
					for (int iPoint = 0; iPoint < interval_point_count; iPoint++) {
						double[] temp_coord = connected_coord_list.get(acc_count + iPoint);
						
						Integer cluster_id_value = ProcessPotentialCluster.getClusterIdWithCoord(
								temp_coord[0], temp_coord[1], den, interval_cluster, point_x_list, point_y_list);
						
						if (cluster_id_value != null)
						{
							connected_cluster_id_hashMap.put(iPoint, cluster_id_value);
						}
					}
				}
				//////////////////////////////////////////////////////////////////////
				//SaveIntervalData.writeIntervalDataWithClusterInfo(outfileName_IntervalCluster, 
				//		iInterval, header, 
				//		curIntervalRecords, cluster_id_hashMap, connected_cluster_id_hashMap,
				//		den);
				
				SaveIntervalData.readWriteIntervalDataWithClusterInfo(
						inputfileName,
						outfileName_IntervalCluster, 
						iInterval, header,
						cluster_id_hashMap, connected_cluster_id_hashMap,
						acc_count, interval_point_count, real_start_index,
						den);
				
				if (connected_x_index>0 && connected_y_index>0)
				{
					GenerateFlowMatrix.genIntervalFlowMatrix(outfileName_IntervalFlowMatrix, iInterval, 
							max_cluster_id, interval_point_count, acc_count,
							cluster_id_hashMap, connected_cluster_id_hashMap);
				}
				SaveIntervalCluster.writeIntervalClusterInfo(outfileName_IntervalCluster, iInterval, interval_cluster);
			}
			else
			{
				Clustering interval_cluster = den.getClusteringResult();
				System.out.printf("Interval %d", iInterval);
				System.out.printf(", Cluster count: %d\n", interval_cluster.size());
				cluster_count_list[iInterval] = interval_cluster.size();
		
				int cluster_count = interval_cluster.size();
				int max_cluster_id = 0;
				for (int iCluster = 0; iCluster<cluster_count; iCluster++)
				{
					moa.clusterers.macro.NonConvexCluster temp_cluster = 
						(moa.clusterers.macro.NonConvexCluster)interval_cluster.getClustering().get(iCluster);
					int cluster_id = (int) temp_cluster.getId();					
					if (cluster_id > max_cluster_id)
					{
						max_cluster_id = cluster_id;
					}
				}
				max_cluster_id=max_cluster_id+1;
				if (max_cluster_id > overall_max_cluster_id)
				{
					overall_max_cluster_id = max_cluster_id;
				}
			}
			
			//////////////////////////////////////////////////////////////////////
			int potential_count = den.getMicroClusteringResult().size();
			for (int iPC = 0; iPC < potential_count; iPC++) 
			{
				moa.clusterers.denstream.MicroCluster temp_cluster = 
						(moa.clusterers.denstream.MicroCluster)(den.getMicroClusteringResult().get(iPC));
				temp_cluster.related_point_idxs.clear();
				temp_cluster.related_points_dist.clear();
			}
			int outlier_count = den.o_micro_cluster.size();
			for (int iOC = 0; iOC < outlier_count; iOC++) 
			{
				moa.clusterers.denstream.MicroCluster temp_cluster = 
						(moa.clusterers.denstream.MicroCluster)(den.o_micro_cluster.get(iOC));
				temp_cluster.related_point_idxs.clear();
				temp_cluster.related_points_dist.clear();
			}
		} //! End interval loop
		

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output interval cluster count file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_IntervalClusterCount));
			outBufWriter.write("Interval Cluster Count\n");
			
			for (int iInterval=0; iInterval<interval_count; iInterval++)
			{
				outBufWriter.write(String.format("%d", cluster_count_list[iInterval]));
				outBufWriter.write("\n");
			}
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}        
    }
    
    public static void CalculateCluster_WithNumber()
    {
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
    	int[] real_interval_count = new int[1];
		String header = StatisticIntervalData.loadAndStatisticInterval_Number(inputfileName, 
				real_interval_count,interval_value);
		interval_count = real_interval_count[0] < interval_count?real_interval_count[0]:interval_count;
		
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////
		moa.clusterers.denstream.WithDBSCAN den = new moa.clusterers.denstream.WithDBSCAN();
		
		den.epsilonOption.setValue(epsilon_val);
		den.minPointsOption.setValue(minpoints_val);
		den.initPointsOption.setValue(initpoints_val);
		den.muOption.setValue(mu_val);
		den.betaOption.setValue(beta_val);
		den.lambdaOption.setValue(lambda_val);
		den.offlineOption.setValue(offline_val);
		den.speedOption.setValue(1);
		den.evaluateMicroClusteringOption.setValue(true);
		
		den.tp = tp_count_value;
		
		den.resetLearningImpl();
		
		String params = den.getParameterString();
		System.out.println(params);

		
		///////////////////////////////////////////////////////////////////////////////////////////
		//
		//
		//
		///////////////////////////////////////////////////////////////////////////////////////////		
		int[] cluster_count_list = new int[interval_count]; 
		String outfileName_IntervalFlowMatrix = String.format("%s/flow_matrix/", output_dir);
		if (connected_x_index>0 && connected_y_index>0)
		{
			createDir(outfileName_IntervalFlowMatrix);
		}
		
		ArrayList<double[]> coord_list = new ArrayList<double[]>();
		ArrayList<double[]> connected_coord_list = new ArrayList<double[]>();
		for (int iInterval = 0; iInterval < interval_count; iInterval++)
		{
			int acc_count = 0;
			for (int idx = 0; idx < iInterval; idx++) {
				acc_count += interval_value;
			}
			int real_start_index = 0;
			
			int interval_point_count = interval_value;
			if (interval_point_count<=0)
			{
				System.out.printf("Interval %d", iInterval);
				System.out.printf(", Cluster count: %d\n", 0);
				cluster_count_list[iInterval] = 0;
				continue;
			}
		
			double[] point_x_list = new double[interval_point_count];
			double[] point_y_list = new double[interval_point_count];
			int[] point_id_list = new int[interval_point_count];
			
			coord_list.clear();
			LoadIntervalPoints.loadPointsWithinAnInterval_Count(inputfileName, iInterval*interval_value, 
					interval_value, x_index, y_index, connected_x_index, connected_y_index,
					coord_list, connected_coord_list);
			
			for (int iPoint = 0; iPoint < interval_point_count; iPoint++) {
				double[] temp_coord = coord_list.get(iPoint);
				DenseInstance temp_instance = new DenseInstance(1.0D, temp_coord);
				temp_instance.setInstancId(iPoint);
		
				point_x_list[iPoint] = temp_coord[0];
				point_y_list[iPoint] = temp_coord[1];
				point_id_list[iPoint] = iPoint;
				
				den.trainOnInstanceImpl_TpStaticIndex(temp_instance);				
			}
			
			if (iInterval >= completed_interval_index)
			{
				ArrayList<Integer> remained_points_idx_list = 
						ProcessPotentialCluster.fillPotentialCluster(den, interval_point_count, 
								point_x_list, point_y_list, point_id_list);
		
				//////////////////////////////////////////////////////////////////////
				Clustering interval_cluster = den.getClusteringResult();
				System.out.printf("Interval %d", iInterval);
				System.out.printf(", Cluster count: %d\n", interval_cluster.size());
				cluster_count_list[iInterval] = interval_cluster.size();

				//////////////////////////////////////////////////////////////////////
				ProcessOfflineCluster.fillOfflineCluster(den, interval_cluster, 
								point_x_list, point_y_list, remained_points_idx_list);
				
				//////////////////////////////////////////////////////////////////////
				HashMap<Integer, Integer> cluster_id_hashMap = new HashMap<>();
				int cluster_count = interval_cluster.size();
				int max_cluster_id = 0;
				for (int iCluster = 0; iCluster<cluster_count; iCluster++)
				{
					moa.clusterers.macro.NonConvexCluster temp_cluster = 
						(moa.clusterers.macro.NonConvexCluster)interval_cluster.getClustering().get(iCluster);
					int cluster_id = (int) temp_cluster.getId();
					int micro_cluster_count = temp_cluster.getMicroClusters().size();
					for (int iMicro = 0; iMicro < micro_cluster_count; iMicro++) 
					{
						moa.clusterers.denstream.MicroCluster temp_micro_cluster = 
							(moa.clusterers.denstream.MicroCluster)temp_cluster.getMicroClusters().get(iMicro);
						
						int point_count = temp_micro_cluster.related_point_idxs.size();
						for (int iPoint=0; iPoint<point_count; iPoint++)
						{
							int point_id = temp_micro_cluster.related_point_idxs.get(iPoint);
							cluster_id_hashMap.put(point_id, cluster_id+1);
						}
					}
					if (cluster_id > max_cluster_id)
					{
						max_cluster_id = cluster_id;
					}
				}
				max_cluster_id=max_cluster_id+1;
				if (max_cluster_id > overall_max_cluster_id)
				{
					overall_max_cluster_id = max_cluster_id;
				}
				
				//////////////////////////////////////////////////////////////////////
				HashMap<Integer, Integer> connected_cluster_id_hashMap = new HashMap<>();
				if (connected_x_index>0 && connected_y_index>0)
				{
					for (int iPoint = 0; iPoint < interval_point_count; iPoint++) {
						double[] temp_coord = connected_coord_list.get(acc_count + iPoint);
						
						Integer cluster_id_value = ProcessPotentialCluster.getClusterIdWithCoord(
								temp_coord[0], temp_coord[1], den, interval_cluster, point_x_list, point_y_list);
						
						if (cluster_id_value != null)
						{
							connected_cluster_id_hashMap.put(acc_count + iPoint, cluster_id_value);
						}
					}
				}
				//////////////////////////////////////////////////////////////////////
				//SaveIntervalData.writeIntervalDataWithClusterInfo(outfileName_IntervalCluster, 
				//		iInterval, header, 
				//		curIntervalRecords, cluster_id_hashMap, connected_cluster_id_hashMap,
				//		den);
				
				SaveIntervalData.readWriteIntervalDataWithClusterInfo(
						inputfileName,
						outfileName_IntervalCluster, 
						iInterval, header,
						cluster_id_hashMap, connected_cluster_id_hashMap,
						acc_count, interval_point_count, real_start_index,
						den);
				
				if (connected_x_index>0 && connected_y_index>0)
				{
					GenerateFlowMatrix.genIntervalFlowMatrix(outfileName_IntervalFlowMatrix, iInterval, 
							max_cluster_id, interval_point_count, acc_count, 
							cluster_id_hashMap, connected_cluster_id_hashMap);
				}
				SaveIntervalCluster.writeIntervalClusterInfo(outfileName_IntervalCluster, iInterval, interval_cluster);
			}
			else
			{
				Clustering interval_cluster = den.getClusteringResult();
				System.out.printf("Interval %d", iInterval);
				System.out.printf(", Cluster count: %d\n", interval_cluster.size());
				cluster_count_list[iInterval] = interval_cluster.size();
		
				int cluster_count = interval_cluster.size();
				int max_cluster_id = 0;
				for (int iCluster = 0; iCluster<cluster_count; iCluster++)
				{
					moa.clusterers.macro.NonConvexCluster temp_cluster = 
						(moa.clusterers.macro.NonConvexCluster)interval_cluster.getClustering().get(iCluster);
					int cluster_id = (int) temp_cluster.getId();					
					if (cluster_id > max_cluster_id)
					{
						max_cluster_id = cluster_id;
					}
				}
				max_cluster_id=max_cluster_id+1;
				if (max_cluster_id > overall_max_cluster_id)
				{
					overall_max_cluster_id = max_cluster_id;
				}
			}
			
			//////////////////////////////////////////////////////////////////////
			int potential_count = den.getMicroClusteringResult().size();
			for (int iPC = 0; iPC < potential_count; iPC++) 
			{
				moa.clusterers.denstream.MicroCluster temp_cluster = 
						(moa.clusterers.denstream.MicroCluster)(den.getMicroClusteringResult().get(iPC));
				temp_cluster.related_point_idxs.clear();
				temp_cluster.related_points_dist.clear();
			}
			int outlier_count = den.o_micro_cluster.size();
			for (int iOC = 0; iOC < outlier_count; iOC++) 
			{
				moa.clusterers.denstream.MicroCluster temp_cluster = 
						(moa.clusterers.denstream.MicroCluster)(den.o_micro_cluster.get(iOC));
				temp_cluster.related_point_idxs.clear();
				temp_cluster.related_points_dist.clear();
			}
		} //! End interval loop
		

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output interval cluster count file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_IntervalClusterCount));
			outBufWriter.write("Interval Cluster Count\n");
			
			for (int iInterval=0; iInterval<interval_count; iInterval++)
			{
				outBufWriter.write(String.format("%d", cluster_count_list[iInterval]));
				outBufWriter.write("\n");
			}
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    
    public static void CalculateFlowAndSimilarity()
    {
    	String outfileName_IntervalFlowMatrix = String.format("%s/flow_matrix/", output_dir);
    	String outfileName_Similarity_1D = String.format("%s/similarity_stats_interval_1d.csv", output_dir);
    	String outfileName_Similarity_2D = String.format("%s/similarity_stats_interval_2d.csv", output_dir);
    	String outfileName_Similarity_2D_Ordered = String.format("%s/similarity_stats_interval_2d_ordered.csv", output_dir);
		
    	///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output interval similarity 1d file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        ArrayList<Double> sim_1d_list = new ArrayList<Double>();
        if (overall_max_cluster_id == 0)
        	overall_max_cluster_id = 600;
        for (int iInterval=0; iInterval<interval_count-1; iInterval++)
        {
        	Integer day_idx = iInterval+1;
        	String inputfileName_Matrix1 = outfileName_IntervalFlowMatrix + "flowprob_matrix"+ day_idx.toString()+".csv";
        	
        	Integer next_day_idx = iInterval+2;
        	String inputfileName_Matrix2 = outfileName_IntervalFlowMatrix + "flowprob_matrix"+ next_day_idx.toString()+".csv";
            
        	double temp_sim = CalculateSimilarity.calculateSimilarity(inputfileName_Matrix1, 
        			inputfileName_Matrix2, overall_max_cluster_id);
        	sim_1d_list.add(temp_sim);
        }
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_Similarity_1D));
			outBufWriter.write("Similarity_1D\n");
			
			for (int iInterval=0; iInterval<sim_1d_list.size(); iInterval++)
			{
				outBufWriter.write(String.format("%f", sim_1d_list.get(iInterval)));
				outBufWriter.write("\n");
			}
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output interval similarity 2d file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        double[][] interval_matrix = new double[interval_count][interval_count];
        for (int iRow = 0; iRow < interval_count; iRow++)
        {
            for (int iCol = 0; iCol < interval_count; iCol++)
            {
            	interval_matrix[iRow][iCol] = 1.0;
            }
        }

        for (int iInterval=0; iInterval<interval_count; iInterval++)
        {
        	Integer interval_idx = iInterval+1;
        	String inputfileName_Matrix1 = outfileName_IntervalFlowMatrix + "flowprob_matrix"+ interval_idx.toString()+".csv";
        	
        	for (int iNextInterval=0; iNextInterval<interval_count; iNextInterval++)
            {
        		if (iInterval == iNextInterval) continue;
	        	Integer next_day_idx = iNextInterval+1;
	        	String inputfileName_Matrix2 = outfileName_IntervalFlowMatrix + "flowprob_matrix"+ next_day_idx.toString()+".csv";
	            
	        	double temp_sim = CalculateSimilarity.calculateSimilarity(inputfileName_Matrix1, 
	        			inputfileName_Matrix2, overall_max_cluster_id);
	        	
	        	interval_matrix[iInterval][iNextInterval] = temp_sim;
            }
        }
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_Similarity_2D));
			outBufWriter.write("Similarity_2D\n");
			
			for (int iRow = 0; iRow < interval_count; iRow++)
	        {
				outBufWriter.write(String.format("%f", interval_matrix[iRow][0]));
	            for (int iCol = 1; iCol < interval_count; iCol++)
	            {
	            	outBufWriter.write(",");
	            	outBufWriter.write(String.format("%f", interval_matrix[iRow][iCol]));	            	
	            }
	            outBufWriter.write("\n");
	        }
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}

		///////////////////////////////////////////////////////////////////////////////////////////
		//
		// Output interval similarity 2d ordered file
		//
		///////////////////////////////////////////////////////////////////////////////////////////
        HashMap<Integer, Double> row_sum = new HashMap<Integer, Double>();
        for (int iRow = 0; iRow < interval_count; iRow++)
        {
        	double sum = 0.0;
        	for (int iCol = 0; iCol < interval_count; iCol++)
            {
        		sum += interval_matrix[iRow][iCol];
            }
            row_sum.put(iRow, sum);
        }
        ArrayList<HashMap.Entry<Integer, Double>> list = new ArrayList<>();
        for(HashMap.Entry<Integer, Double> entry : row_sum.entrySet())
        {
            list.add(entry);
        }    
        list.sort(new Comparator<HashMap.Entry<Integer, Double>>(){
            @Override
            public int compare(HashMap.Entry<Integer, Double> o1, HashMap.Entry<Integer, Double> o2) 
            {
            	double val = o2.getValue()-o1.getValue();
            	if (val<0) return -1;
            	else if (val>0) return 1;
            	else return 0;
            } 
        });

        String first_line = "0,";
        for(HashMap.Entry<Integer, Double> entry: list)
        {
        	Integer temp_id = entry.getKey() + 1;
        	first_line += temp_id.toString() + ",";
        }
        first_line.substring(0, first_line.length() - 1);
        
        try {
			BufferedWriter outBufWriter =new BufferedWriter(new FileWriter(outfileName_Similarity_2D_Ordered));
			outBufWriter.write(first_line);
			outBufWriter.write("\n");
			
			for(HashMap.Entry<Integer, Double> entry: list)
	        {
				Integer temp_key = entry.getKey() + 1;
				outBufWriter.write(temp_key.toString());
				for (int i=0; i<interval_count; i++)
				{
					double temp_val = interval_matrix[temp_key-1][i];
					outBufWriter.write(",");
					outBufWriter.write(String.format("%f", temp_val));
				}
				outBufWriter.write("\n");
	        }
			
			outBufWriter.close();
		} catch (IOException e) {
			e.printStackTrace();
		}    	
    }
    
	public static void main(String[] args) 
	{
		System.out.println("Starting...");
		
		if (ParseSettings(args) != 0)
		{
			return;
		}
		
		/*PreCalculateCluster();*/
		
		
		if (completed_interval_index < interval_count)
		{
			if (time_index>=0)
				CalculateCluster();
			else
				CalculateCluster_WithNumber();
			
			if (connected_x_index>=0 && connected_y_index>=0)
				CalculateFlowAndSimilarity();
		}
		System.out.println("\n...Finished");
	}

}
